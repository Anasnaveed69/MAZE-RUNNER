[org 0x0100]

jmp introductoryscreen


;Maze Initialization
mazes: dw
mazeNumber dw 0
mazeRows : dw 37
mazeCols : dw 19



;Game Messages
message1: db 'MAZE', 0x00  ; First part of the title
message2: db 'RUNNER', 0x00 ; Second part of the title
instructions: db 'INSTRUCTIONS: Use W A S D KEYS to navigate the Maze. Avoiding enemies. Players   must find their way out of a complex Maze filled with chellenges', 0x00
invalid_message: db 'Invalid input .  Please select 1, 2, or 3.', 0x00
existing_message:db 'Existing Game.......Thank You For Playing.',0x00
welcome_message:db 'Welcome to the World of Console Gaming.',0x00 
project_message:db' A Project by M.Saboor Islam & Anas Naveed.',0x00
enter_message:db'Press Enter to Continue....',0x00
menu_start: db '1. Start', 0x00
menu_instructions: db '2. Instructions', 0x00
menu_exit: db '3. Exit', 0x00
winning : db 'YOU WON THE GAME',0X00
Lives_message:db'Lives :',0x00
Score_message:db'Scores :',0x00
game_over_msg :db "YOU LOST MAN . GAME OVER", 0
superman_mood_msg: db 'SUPERMAN MOOD ON (NOW FLY] BUDDY',0x00
movement_State:db 1
;MAZE COMPONENTS

score :dw 0        
ring_value :dw 10
enemy_value :dw 5  
converted_score :db '0000'   
lives :db 3         
gamestate: db 1
reward:dw 0x03E9 
endingPoint: dw 2970
exitGraphics :dw 0x99FE 
enemy:dw 0x050F
hrs: dw 0
min: dw 0
sec: dw 0
ms:  dw 0
ticks: dw 0
lastUpdateTime: dw 0

; Timer
timeString : db 'Time: 00:00', 0
 ms_per_cycle equ 55     ; Number of milliseconds per timer cycle (approximately 55 ms)
randNum : db 0
lastRand : db 0
totalRewards :db 10
totalEnemies :db 3
enemiesPos times 3 dw 0
enemieCallCounter : db 0


;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;First Introduction Screen
introductoryscreen:
 mov byte[gamestate],0
call animation 
call play_starting

    mov ah, 0x02        
    mov bh, 0           
    mov dh, 4        
    mov dl, 20      
    int 0x10            
   
    mov si, welcome_message   
    call print_string  
	mov ah, 0x02        
    mov bh, 0           
    mov dh, 7      
    mov dl, 20      
    int 0x10           

   
    mov si, project_message   
    call print_string   
   
    mov ah, 0x02        
    mov bh, 0           
    mov dh, 15        
    mov dl, 25          
    int 0x10           
   mov si,enter_message
   call print_string
wait_for_input2:
  
    call get_input        

    cmp al, 0x0D          ; Check if Enter key (ASCII 0x0D) was pressed
    je start              

  
    call beep_on_keypress                  
    jmp wait_for_input2    

 animation:

    mov ah, 0x06        ; BIOS function to scroll up
    mov al, 0          
    mov bh, 0x2E       
    mov cx, 0          
    mov dx, 0x184F      ; End at the bottom-right corner (80 columns x 25 rows = 0x184F)
    int 0x10   
	push es
	push ax
	push di
	
	mov ax, 0xb800
	mov es,ax
	
	mov ax,0xAEB2
	
	mov di,348

moveRight1:
	mov [es:di],ax
	call delay1
	
	add di,2
	cmp di,448
	jne moveRight1
	
moveDown1:
	mov [es:di],ax
	call delay1
	
	add di,160
	cmp di,3328
	jl moveDown1

moveLeft1:
	mov [es:di],ax
	call delay1
	
	sub di,2
	cmp di,3228
	jne moveLeft1

moveUp1:
	mov [es:di],ax
	call delay1
	
	sub di,160
	cmp di ,348
	jg moveUp1
	
	pop di
	pop ax
	pop es

	ret 

clrscr:
call delay

    mov ah, 0x06      
    mov al, 0           
    mov bh, 0x2E        
    mov cx, 0          
    mov dx, 0x184F      
    int 0x10            ; Call BIOS interrupt to clear the screen
    ret
	

delay:
	pusha
	mov cx,0xFFF
	loop1:
		dec cx
		jnz loop1
	popa
	ret
delay1:
	pusha
	mov cx,0xFFFF
	loop2:
		dec cx
		jnz loop2
	popa
	ret
designing:

	push bp
	mov bp,sp
	push es
	push ax
	push di
	
	mov ax, 0xb800
	mov es,ax
	
	mov ax,0x2EFE
	
	mov di,0

moveRight:
	mov [es:di],ax
	call delay
	call delay
	add di,2
	cmp di,158
	jne moveRight
	
moveDown:
	mov [es:di],ax
	call delay
	call delay
	add di,160
	cmp di,3840
	jl moveDown

moveLeft:
	mov [es:di],ax
	call delay
	call delay
	sub di,2
	cmp di,3840
	jne moveLeft

moveUp:
	mov [es:di],ax
	call delay
	call delay
	sub di,160
	cmp di,2
	jg moveUp
	
	pop di
	pop ax
	pop es
	pop bp
	ret 
	

;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

GenRandNum:
    push bp
    mov bp, sp            
    push cx               
    push ax
    push dx
    push si               

    
    mov ah, 00h           ; BIOS interrupt to get system time
    int 1Ah               ; CX:DX contains clock ticks since midnight

  
    mov ax, dx            ; Use DX (lower ticks) in AX
    xor ax, cx            ; XOR with CX (upper ticks) for more variability
    ror ax, 3             
    add ax, sp            ; Mix in stack pointer (sp) for additional randomness
    xor ax, si            ; XOR with SI register to shuffle further

    ; Use an additional interrupt to add to randomness
    mov ah, 0            
    int 1Ch               ; Call user timer tick interrupt (no real effect, but slight time delay)
    add ax, cx            ; Add CX again to further vary the result
    ror ax, 5             

    ; XOR with a constant and rotate further
    xor ax, 0x5A3C        ; XOR with an arbitrary constant
    ror ax, 7            
    add ax, bp            ; Add BP register to introduce more random state

    ; Final division to get a number within bounds
    xor dx, dx           
    mov cx, [bp+4]        ; Load upper bound parameter into CX
    div cx                ; Divide AX by upper bound; remainder in DL (0 <= DL < CX)

    ; Ensure the generated number is different from the previous
checkRand:
    cmp dl, [lastRand]    
    jne storeRand        
    add dl, 1             
    cmp dl, [bp+4]        ; Check if incremented value exceeds upper bound
    jb checkRand
    
storeRand:
    mov [randNum], dl     ; Store the result in randNum
    mov [lastRand], dl    ; Update lastRand with the new random number

   
    pop si                
    pop dx
    pop ax
    pop cx
    pop bp
    ret 2


;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;---------------------------------------------------------------------Sounds Section---------------------------------------------------------------------------------------------
	
play_explosion_sound:
    ; Set up PIT channel 2 in mode 3 (square wave)
    mov al, 0xB6          ; Set PIT to mode 3
    out 0x43, al          ; Send control byte to port 0x43

    ; High pitch tone (~1000 Hz)
    mov ax, 1193          ; Divider for ~1000 Hz
    call set_frequency
    call delay1
    call delay1

    ; Medium pitch tone (~500 Hz)
    mov ax, 2387          ; Divider for ~500 Hz
    call set_frequency
    call delay1
    call delay1

    ; Low pitch tone (~150 Hz)
    mov ax, 7615          ; Divider for ~150 Hz
    call set_frequency
    call delay1
    call delay1

; Stop the sound by clearing bits 0 and 1 of port 0x61
    in al, 0x61           
    and al, 0xFC          
    out 0x61, al          

    ret

play_sound:
    mov al, 0xB6          
    out 0x43, al          

    ; Low suspense tone (220 Hz)
    mov ax, 5428          ; Divider for ~220 Hz tone
    call set_frequency
    call delay1           ; Delay to hold tone
    call delay1
    call delay1
    call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
    ; Medium suspense tone (330 Hz)
    mov ax, 3642          ; Divider for ~330 Hz tone
    call set_frequency
    call delay1
    call delay1
    call delay1
    call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
    ; High suspense tone (550 Hz)
    mov ax, 2186          ; Divider for ~550 Hz tone
    call set_frequency
    call delay1
    call delay1
    call delay1
    call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
	call delay1
    
    in al, 0x61          
    and al, 0xFC          
    out 0x61, al         

    ret

set_frequency:
    ; Sends frequency to PIT channel 2
    out 0x42, al
    mov al, ah            
    out 0x42, al          

    in al, 0x61           
    or al, 0x03         
    out 0x61, al          

    ret
	
play_game_over_sound:
    ; Set up PIT channel 2 in mode 3 (square wave)
    mov al, 0xB6          
    out 0x43, al        

    ; High pitch tone (~800 Hz)
    mov ax, 1428          ; Divider for ~800 Hz
    call set_frequency
    call delay1
    call delay1

    ; Medium pitch tone (~400 Hz)
    mov ax, 2387          ; Divider for ~400 Hz
    call set_frequency
    call delay1
    call delay1

    ; Low pitch tone (~200 Hz)
    mov ax, 4773          ; Divider for ~200 Hz
    call set_frequency
    call delay1
    call delay1

    
    in al, 0x61          
    or al, 0x03          
    out 0x61, al        


    ret
	
play_starting:
    ; Set up PIT channel 2 in mode 3 (square wave)
    mov al, 0xB6          ; Set PIT to mode 3 (square wave)
    out 0x43, al          ; Send control byte to port 0x43

    ; First note: C4 (261 Hz)
    mov ax, 4776          ; Divider for ~261 Hz
    call set_frequency
    call delay1          
    call delay1           
call delay1           
    call delay1           
call delay1           
    call delay1          

    ; Second note: D4 (294 Hz)
    mov ax, 4286          ; Divider for ~294 Hz
    call set_frequency
    call delay1
    call delay1
	call delay1          
    call delay1           
call delay1           
    call delay1           
call delay1           
    call delay1           


    ; Third note: E4 (329 Hz)
    mov ax, 3654          ; Divider for ~329 Hz
    call set_frequency
    call delay1
    call delay1
call delay1           
    call delay1           

    ; Fourth note: C4 (261 Hz)
    mov ax, 4776          ; Divider for ~261 Hz
    call set_frequency
    call delay1
    call delay1
call delay1           
    call delay1           

    ; Fifth note: G4 (392 Hz)
    mov ax, 3412          ; Divider for ~392 Hz
    call set_frequency
    call delay1
    call delay1
call delay1           
    call delay1           

    ; Sixth note: E4 (329 Hz)
    mov ax, 3654          ; Divider for ~329 Hz
    call set_frequency
    call delay1
    call delay1
call delay1           
    call delay1           

    ; Seventh note: C4 (261 Hz)
    mov ax, 4776          ; Divider for ~261 Hz
    call set_frequency
    call delay1
    call delay1
call delay1          
    call delay1           

    ; Eighth note: D4 (294 Hz)
    mov ax, 4286          ; Divider for ~294 Hz
    call set_frequency
    call delay1
    call delay1
call delay1           
    call delay1           

    in al, 0x61         
    and al, 0xFC         
    out 0x61, al        

    ret


	play_clapping_sound:
   
    mov al, 0xB6         
    out 0x43, al          

    ; Clap 1: High pitch tone (1000 Hz)
    mov ax, 1193          ; Divider for ~1000 Hz (high pitch)
    call set_frequency
   call delay1
 call delay1
    ; Clap 2: Medium pitch tone (500 Hz)
    mov ax, 2387          ; Divider for ~500 Hz (medium pitch)
    call set_frequency
   call delay1
 call delay1
    ; Clap 3: High pitch tone (1000 Hz)
    mov ax, 1193          ; Divider for ~1000 Hz
    call set_frequency
	 call delay1
 call delay1
    ; Clap 4: Medium pitch tone (500 Hz)
    mov ax, 2387          ; Divider for ~500 Hz
    call set_frequency
 call delay1
 call delay1
    ; Clap 5: High pitch tone (1000 Hz)
    mov ax, 1193          ; Divider for ~1000 Hz
    call set_frequency
    call delay1
 call delay1
     in al, 0x61           
    or al, 0x03           
    out 0x61, al        


    ret

beep_on_keypress:
push  ax
  
    mov ah, 0x00         
    int 0x16              ; Wait for key press

    ; Set up PIT to produce a beep (typically 1000 Hz for beep sound)
    mov al, 0xB6
    out 0x43, al          

    mov ax, 1193180 / 1000 ; Divider for 1000 Hz beep sound
    call set_frequency   
    
    
    call delay1           

    in al, 0x61           
    and al, 0xFC         
    out 0x61, al         
pop ax
    ret
	
play_level_up_sound:
push ax
 
    mov al, 0xB6          
    out 0x43, al         

    ; Low pitch tone (~150 Hz)
    mov ax, 7615          ; Divider for ~150 Hz
    call set_frequency
    call delay1

    ; Medium pitch tone (~400 Hz)
    mov ax, 2387          ; Divider for ~400 Hz
    call set_frequency
    call delay1

    ; High pitch tone (~800 Hz)
    mov ax, 1428          ; Divider for ~800 Hz
    call set_frequency
    call delay1
 
    in al, 0x61           
    and al, 0xFC         
    out 0x61, al         
	pop ax
    ret
	
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

;	DRAW MAZE AND ITS COMPONENTS SECTION	

addReward:
mov ax,10
push ax
call delay
call GenRandNum
cmp byte [randNum],3
jne noReward
call delay
cmp byte [totalRewards],0
jle noReward

mov ax,[reward]
sub byte [totalRewards],1

noReward:
jmp addEnemies ; No reward then also check for enemies 

addEnemies:
cmp byte [randNum],5
jne noEnemy
cmp byte [totalEnemies],0
jle noEnemy

mov ax,[enemy]
sub byte [totalEnemies],1
call addEnemyPos


noEnemy:
jmp callbackReward

addEnemyPos:
push bx
push si
mov bx,enemiesPos
mov si,[totalEnemies]
shl si,1
mov [bx+si],di
pop si
pop bx
ret

maze1:

push bp
mov bp,sp
pusha

mov byte [totalRewards],10 ; init again
mov byte [totalEnemies],3 ; init again

mov bx,[bp+4]
mov ax,[bp+6]
add bx,ax
mov cx,1
mov si,0
mov ax,0xb800
mov es,ax
mov di,180

l1:
mov ax,[bx+si]
cmp ax,0x0720
je addReward


callbackReward:
mov [es:di],ax
add di,2
add si,2
mov word ax,[mazeRows]
shl ax,1
mul byte cl
cmp si,ax
jne l1

mov word ax,[mazeRows]
shl ax,1
mov dx,160
sub dx,ax
add di,dx
inc cx
cmp cx,[mazeCols]
jle l1


exitMazeGen:
popa
pop bp
ret 4

;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;   START SECTION

start:
call clrscr


call designing
call play_sound

    mov ah, 0x02        ; BIOS function to set cursor position
    mov bh, 0           
    mov dh, 5           
    mov dl, 35          
    int 0x10            
    ; Display "MAZE" with animation
    mov si, message1    
call delay
call delay
print_loop1:
    lodsb               
    or  al, al          ; Check if it's the null terminator (0x00)
    jz   done1         
    mov ah, 0x0e        ; BIOS teletype function (prints character in AL)
    mov bh, 0           
    mov bl, 0x07       
    int 0x10    
call delay1
call delay1
	
mov cx,0xFFFF
repeating:
loop repeating
jmp print_loop1     ; Continue with next character

done1:

   
    mov ah, 0x02       
    mov bh, 0           
    mov dh, 7          
    mov dl, 40          
    int 0x10           

    ; Display "RUNNER" with animation
    mov si, message2    
print_loop2:
    lodsb               
    or  al, al          ; Check if it's the null terminator (0x00)
    jz   done2         
    mov ah, 0x0e        ; BIOS teletype function (prints character in AL)
    mov bh, 0          
    mov bl, 0x07        
    int 0x10            
call delay1
call delay1

	   mov cx,0xFFFF
repeating1:
loop repeating1
    jmp print_loop2     ; Continue with next character

done2:

    ; Display the menu
    call display_menu

    ; Wait for user input and handle it
    call get_input
    cmp al, '1'         ; Compare user input with '1' (Start Game)
    je start_game
    cmp al, '2'         ; Compare user input with '2' (Instructions)
    je near show_instructions
    cmp al, '3'         ; Compare user input with '3' (Exit)
    je near exit_program

    ; If input is invalid, display error message and prompt again
    call display_invalid_message
    call get_input      ; Wait for key press to continue
    jmp start           ; Return to the menu after invalid input
	




;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; Timer interrupt handler called every 55 milliseconds (18.222Hz)
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
onTimer:


    push ax
    push bx
	push di
	
	 ; Check game state
    cmp byte [gamestate], 1          ; 1 = In-game
    jne skip_timer_update            ; Skip timer updates if not in-game
	
    add word [ticks], 1            ; Increment ticks
    add word [ms], ms_per_cycle    ; Add 55 ms to total milliseconds
    cmp word [ms], 1000            ; Check if (1 second) passed
    jl skip_sec                    ; If less than 1000 ms, continue

    mov word [ms], 0               ; Reset ms counter
    inc word [sec]                 ; Increment seconds
    cmp word [sec], 60
    jl skip_min

    mov word [sec], 0              ; Reset seconds
    inc word [min]                 ; Increment minutes
    cmp word [min], 60
    jl skip_hour

    mov word [min], 0              ; Reset minutes
    inc word [hrs]                 ; Increment hours

skip_hour:
skip_min:
skip_sec:

    ; Update time string after every second
    call update_time_string
    call display_time_string
    call EnemiesMovement

    ; Restore registers and end interrupt
    mov al, 0x20                   ; End of interrupt command
    out 0x20, al                   ; Send EOI to the PIC
	pop di
    pop bx
    pop ax

    iret                           

skip_timer_update:
    ; Restore registers and return from interrupt
    mov al, 0x20
    out 0x20, al
    pop di
    pop bx
    pop ax
    iret
time:
    mov ax, 0
    mov es, ax

    ; Initialize time variables
    mov word [sec], 0
    mov word [min], 0
    mov word [hrs], 0
    mov word [ticks], 0
    mov word [lastUpdateTime], 0

    ; Hook the timer interrupt
    cli                             ; Disable interrupts
    mov word [es:8 * 4], onTimer    ; Set ISR address at vector 8
    mov [es:8 * 4 + 2], cs
    sti                             ; Enable interrupts
    ret

;Blinking OF ENEMIES

EnemiesMovement:
    pusha               

    ; Increment the call counter
    mov al, [enemieCallCounter]
    inc al              
    mov [enemieCallCounter], al

  
    cmp al, 5
    jne exitEnemiesMovement ; If not 5th call, exit the function

    ; Reset the counter after the 5th call
    mov byte [enemieCallCounter], 0

    ; Main logic (executed only on the 5th call)
    cmp word [sec], 4         ; Check if sec <= 10
    jle exitEnemiesMovement   

    mov cx, 3     
    test cx, cx                 ; Check if there are enemies to process
    jz exitEnemiesMovement     

    mov ax, 0xb800              
    mov es, ax
    mov bx, enemiesPos          ; Load the base address of enemiesPos

loopEnemiesMovement:
    mov di, [bx]                ; Load the enemy position into DI
   cmp word [es:di], 0x0720    ; Check if the cell is empty space
    je convertToEnemy           

    mov word [es:di], 0x0720    ; Otherwise, write empty space
    jmp nextLoopEnemies         
    

convertToEnemy:
    mov ax, [enemy]             
    mov [es:di], ax             

nextLoopEnemies:
    add bx, 2                 
    loop loopEnemiesMovement    ; Repeat for all enemies

exitEnemiesMovement:
    popa                    
    ret                        
	

	
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


start_game:
mov word [score],0
mov byte [lives],3 ; init again
mov byte[gamestate],1
mov byte[movement_State],1
call clrscr
call time   



mov ax,0xb800
mov es,ax

xor cx,cx

mov ax,10
push ax
call GenRandNum 
mov byte cl, [randNum]       ; Load mazeNumber into CX
mov ax, 1406                      ; Each maze is 703 words
mul cx                           ; Offset = mazeNumber * 703
mov bx, ax                       ; BX now holds the offset for the selected maze

mov ax,mazes
push ax
push bx                           ; Push the segment of Maze1

; Call the maze1 function
call maze1

call display_score
mov word di,2970
mov ax,[exitGraphics]
mov word [es:di],ax

mov di,342         ; Set initial position of the player (index of the starting point)
mov si,di          ; Save the starting position
mov word [score], 0

mov word[es:di],0x0201


call display_lives

  call get_input         ; Check for player input
    
    ; Check if the ESC key is pressed
    cmp al, 0x1B           
    je quit
	
    

mainloop:
    ; Check if enough ticks have passed to update the timer display
    mov ax, [cs:ticks]
    mov bx, [cs:lastUpdateTime]
    sub ax, bx
    cmp ax, 1000 / ms_per_cycle      ; Check if roughly 1 second has passed
    jb check_input

    ; Save the last update time
    mov ax, word [cs:ticks]
    mov word [cs:lastUpdateTime], ax

    ; Update seconds in timeString
    mov al, byte [sec]
    call byte_to_ascii
    mov [timeString + 9], ah         ; Tens place of seconds
    mov [timeString + 10], al        ; Units place of seconds

    ; Update minutes in timeString
    mov al, byte [min]
    call byte_to_ascii
    mov [timeString + 6], ah         ; Tens place of minutes
    mov [timeString + 7], al         ; Units place of minutes


    mov ax, [cs:min]              ; Load minutes
    cmp ax, 2                 ; Check if minutes == 2
    jne mainloop             ; If minutes != 2, continue checking

    ; If minutes == 2, check seconds
    mov ax, [cs:sec]              ; Load seconds
    cmp ax, 30                  ; Check if seconds >= 30
    jge game_over                  ; If seconds >= 30, go to game over


check_input:
    ; Clear AX and read keyboard input
    xor ax, ax
    mov ah, 0
    int 0x16                         ; BIOS keyboard interrupt to get key press

    ; Check for movement keys
    cmp al, 0x53                     ; Check for 'S' key (down)
    je movedown
    cmp al, 0x73                     ; Check for 's' key (down)
    je movedown
    cmp al, 0x44                     ; Check for 'D' key (right)
    je moveright
    cmp al, 0x64                     ; Check for 'd' key (right)
    je moveright
    cmp al, 0x57                     ; Check for 'W' key (up)
    je moveup
    cmp al, 0x77                     ; Check for 'w' key (up)
    je moveup
    cmp al, 0x41                     ; Check for 'A' key (left)
    je moveleft
    cmp al, 0x61                     ; Check for 'a' key (left)
    je moveleft
    cmp al, 0x1B                     ; Check for Escape key
    je quit
   
 cmp al, 0x20                     ; Check for Spacebar key
    je superman_Mode                 ; Jump to superman mode if Spacebar is pressed
    ; If no valid key is pressed, loop back to check input again
    jmp check_input
	
    ret



quit:
mov byte[gamestate],0
call start


SupermanMoodscreen:
 mov byte[gamestate],0

 call play_starting
	
    mov ah, 0x02       
    mov bh, 0         
    mov dh, 23      
   mov dl, 20 	
    int 0x10           

    
    mov si, superman_mood_msg     
    call print_string 

   

wait_for_input3:
   
    call get_input        ; Get a key press from the user

    cmp al, 0x0D          ; Check if Enter key (ASCII 0x0D) was pressed
    je mainloop     

    call beep_on_keypress              
    jmp wait_for_input3   


superman_Mode:
mov byte[movement_State],0
call SupermanMoodscreen

ret



 update_time_string:
    ; Update seconds in timeString
    mov al, byte [sec]
    call byte_to_ascii
    mov [timeString + 9], ah        ; Tens place of seconds
    mov [timeString + 10], al       ; Units place of seconds

    ; Update minutes in timeString
    mov al, byte [min]
    call byte_to_ascii
    mov [timeString + 6], ah        ; Tens place of minutes
    mov [timeString + 7], al        ; Units place of minutes
    ret

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; Converts a byte (0-99) in AL to two ASCII digits in AL and AH
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
byte_to_ascii:
    mov ah, 0                        
    mov bl, 10                      
    div bl                         
    add al, '0'                      ; Convert quotient (tens) to ASCII
    xchg al, ah                      ; Move tens to AH
    add al, '0'                   
    ret  

;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; Displays the timeString at a fixed location in video memory
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
display_time_string:

    push ax
    push bx
    push es
    push di

    mov ax, 0xb800                  
    mov es, ax
    mov di, 3170                    

    mov si, timeString               
    mov cx, 11                       ; Length of "Time: 00:00"

displayloop:
    lodsb                            
    mov ah, 0x21              
    stosw                            ; Write to video memory
    loop displayloop
    pop di
    pop es
    pop bx
    pop ax
    ret




; Display Score 
display_score:
   
    push ax
    push bx
    push cx
    push dx
    push di
	push si
	
	
    mov ah, 0x02        
    mov bh, 0           
    mov dh, 2         
    mov dl, 65        
    int 0x10            

 
    mov si, Score_message
    call print_string      ; Print the message
	
    mov ax, [score]             
    call convert_to_ascii       

   
    mov di, 470              
    mov cx, 4                   

    ; Skip leading zeros
    mov si, 0                   
    mov bl, 0                   

display_loop:
    mov al, [converted_score + si]  
    test al, al                      
    jz skip_zero                     

    mov ah, 0x2F                   
    mov [es:di], ax                 
    add di, 2                        

skip_zero:
    inc si                          
    loop display_loop                
    pop si
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    ret

convert_to_ascii:
push cx
push di
push bx
push ax
push si
push dx
    mov cx, 4                        ; Maximum of 4 digits
    mov di, 3                        ; Start from the last index (3) of converted_score array
    mov bx, 10                       
    mov ax, [score]                  

convert_loop:
    xor dx, dx                       
    div bx                           
    add dl, '0'                      
    mov [converted_score + di], dl   
    dec di                          
    loop convert_loop                
pop dx
pop si
pop ax
pop bx
pop di
pop cx
    ret

 
; Move Down:
movedown:
    cmp di, [endingPoint]      ; Check if player has reached the ending point
    je winningscreen            ; Jump to winningscreen if reached

    xor ax, ax
    mov ax, [es:di+160]       ; Check the next position downwards
    cmp byte [movement_State], 0
    je skip_wall_check_down    ; Skip wall check in Superman mode
    cmp ax, 0x04B2             ; Check if it's a wall (value from Maze1)
    je mainloop                ; If it's a wall, return to main loop

skip_wall_check_down:
cmp di,2976
jg startAgain1
    mov word [es:di], 0x0720   ; Erase the current position
    add di, 160                ; Move down (increment di by 160 to move to the next row)

    cmp ax, [enemy]            ; Check if enemy is encountered
    je startAgain

    cmp ax, [reward]
    jne Update_Pos

update_score:
    call play_level_up_sound
    mov dx, [ring_value]
    add [score], dx            ; Add points for collecting a ring
    call display_score

Update_Pos:
    mov ax, 0x0720             ; Clear the old position
    mov [es:si], ax
    mov ax, 0x0201             ; Mark the new position with the player character
    mov [es:di], ax
    mov si, di

    call delay1
    jmp mainloop


; Move Right:
moveright:
    cmp di, [endingPoint]
    je winningscreen

    xor ax, ax
    mov ax, [es:di+2]          ; Check the next position to the right
    cmp byte [movement_State], 0
    je skip_wall_check_right
    cmp ax, 0x04B2             ; Check if it's a wall
    je mainloop

skip_wall_check_right:

    mov word [es:di], 0x0720   ; Erase the current position
    add di, 2                  ; Move right

    cmp ax, [enemy]
    je startAgain

    cmp ax, [reward]
    jne Update_Pos1

update_score1:
    call play_level_up_sound
    mov dx, [ring_value]
    add [score], dx
    call display_score

Update_Pos1:
    mov ax, 0x0720
    mov [es:si], ax
    mov ax, 0x0201
    mov [es:di], ax
    mov si, di

    call delay1
    jmp mainloop


; Move Up:
moveup:
    cmp di, [endingPoint]
    je winningscreen

    xor ax, ax
    mov ax, [es:di-160]        ; Check the next position upwards
    cmp byte [movement_State], 0
    je skip_wall_check_up
    cmp ax, 0x04B2             ; Check if it's a wall
    je mainloop

    

skip_wall_check_up:
cmp di,342
jl startAgain1

 mov word [es:di], 0x0720   ; Erase the current position
   sub di, 160                ; Move up

    cmp ax, [enemy]
    je startAgain

    cmp ax, [reward]
    jne Update_Pos2

update_score2:
    call play_level_up_sound
    mov dx, [ring_value]
    add [score], dx
    call display_score

Update_Pos2:
    mov ax, 0x0720
    mov [es:si], ax
    mov ax, 0x0201
    mov [es:di], ax
    mov si, di

    call delay1
    jmp mainloop


; Move Left:
moveleft:
    cmp di, [endingPoint]
    je winningscreen

    xor ax, ax
    mov ax, [es:di-2]          ; Check the next position to the left
    cmp byte [movement_State], 0
    je skip_wall_check_left
    cmp ax, 0x04B2             ; Check if it's a wall
    je mainloop

skip_wall_check_left:
    mov word [es:di], 0x0720   ; Erase the current position
    sub di, 2                  ; Move left

    cmp ax, [enemy]
    je startAgain

    cmp ax, [reward]
    jne Update_Pos3

update_score3:
    call play_level_up_sound
    mov dx, [ring_value]
    add [score], dx
    call display_score

Update_Pos3:
    mov ax, 0x0720
    mov [es:si], ax
    mov ax, 0x0201
    mov [es:di], ax
    mov si, di

    call delay1
    jmp mainloop


startAgain:
call play_explosion_sound
cmp word[score],0
jne  subtracting
jmp Lives
subtracting:

mov dx, [enemy_value]
    sub [score], dx             
    call display_score         
Lives:
; If player collides with enemy, subtract a life
dec byte [lives]
call display_lives  ; Update the displayed lives
cmp byte [lives], 0         ; Check if no lives remain
je game_over                ; Trigger game over if no lives are left

mov ax, 0x0720   
mov [es:si], ax   
mov di,342
mov si,di          

mov word[es:di],0x0201

jmp mainloop

startAgain1:

mov ax, 0x0720   
mov [es:si], ax   
mov di,184
mov si,di          


mov word[es:di],0x02FE 

jmp mainloop


exit_program:
   
	call display_existing_message
    mov ax, 0x4C00      ; Terminate program
    int 0x21   


;---------------------------------Home Screen--------------------------------------------------------------------------------------------------------------------------------	
	
show_instructions:

call beep_on_keypress

    call clrscr
  
    mov ah, 0x02       
    mov bh, 0         
    mov dh, 5        
    mov dl, 0    
    int 0x10          

   
    mov si, instructions
    call print_string     

   
    call get_input
    jmp start            


display_menu:
    ; Print "Start"
    mov ah, 0x02
    mov bh, 0
    mov dh, 11
    mov dl, 35
    int 0x10
    mov si, menu_start
    call print_string

    mov ah, 0x02
    mov bh, 0
    mov dh, 13
    mov dl, 35
    int 0x10
  
    mov si, menu_instructions
    call print_string
   
    mov ah, 0x02
    mov bh, 0
    mov dh, 15
    mov dl, 35
    int 0x10
   
    mov si, menu_exit
    call print_string
    ret

print_string:
   
    mov ah, 0x0E        ; Teletype function to print character
    mov bh, 0           
    mov bl, 0x07       
	call delay
print_loop:
    lodsb               
    or  al, al          
    jz   done_printing  
    int 0x10            
	call delay1
    jmp print_loop
done_printing:
    ret

get_input:
   
    mov ah, 0x00        
	mov ch, 0x20 

    int 0x16           
    ret


;-----------------------------------------------------------------MAZE COMPONENTS ---------------------------------------------------------------------------------------------
display_lives:
    push ax
    push bx
    push es
    push di

 
    mov ah, 0x02        
    mov bh, 0           
    mov dh, 10         
    mov dl, 65        
    int 0x10            

 
    mov si, Lives_message
    call print_string     
	
    mov al, [lives]      ; AL = lives count
    mov bl, al           ; BL = lives count (number of hearts to print)

 
    mov ax, 0xB800     
    mov es, ax

    
    mov di, 1750

print_lives_loop:
   
    mov ah, 0x0e         ; BIOS function to write character in teletype mode
    mov  al, 0x03      
    

    mov [es:di], al
    mov  word [es:di+1], 0x24  

    add di, 2           
    dec bl               
    jnz print_lives_loop

    pop di
    pop es
    pop bx
    pop ax
    ret

display_invalid_message:
call beep_on_keypress
  
    call clrscr
	call delay

	mov ah, 0x02
    mov bh, 0
    mov dh, 10
    mov dl, 20
    int 0x10
    mov si, invalid_message
    call print_string


    call get_input
    ret
	
game_over:
mov byte[gamestate],0
   
    call clrscr
    call designing
	   call play_game_over_sound

 
    mov ah, 0x02      
    mov bh, 0          
    mov dh, 10        
    mov dl, 30          
    int 0x10           


    mov si, game_over_msg 
    call print_string    
wait_for_input:
  
    call get_input        

    cmp al, 0x0D          
    je start             

    
    call beep_on_keypress                 
    jmp wait_for_input    ; Loop to wait for valid input

winningscreen:
 mov byte[gamestate],0
    call clrscr
    call designing
     call play_clapping_sound
	
    mov ah, 0x02       
    mov bh, 0         
    mov dh, 10       
   mov dl, 30   	
    int 0x10           

    
    mov si, winning     
    call print_string 

   

   
wait_for_input1:
   
    call get_input        ; Get a key press from the user

    cmp al, 0x0D          ; Check if Enter key (ASCII 0x0D) was pressed
    je start          

    call beep_on_keypress              
    jmp wait_for_input1   

display_existing_message:
    call clrscr
	

	mov ah, 0x02
    mov bh, 0
    mov dh, 10
    mov dl, 20
    int 0x10
    mov si, existing_message
    call print_string

    
    ret
